import matplotlib as mpl
from mpl_toolkits.mplot3d import Axes3D
import numpy as np
import matplotlib.pyplot as plt


def potential_e(x1, x2, l):
    return k * (np.linalg.norm( x1 - x2 ) - l) ** 2 / 2


def energy(q1, q2, l):
    x11 = np.array( [ [ 0 ],
                      [ 0 ],
                      [ 0 ] ] )

    x12 = np.array( [ [ 0 ],
                      [ 0 ],
                      [ d ] ] )

    x21 = np.array( [ [ q1[ 0 ] ],
                      [ q1[ 1 ] ],
                      [ q1[ 2 ] ] ] )

    x22 = np.array( [ [ q1[ 0 ] + q1[ 3 ] ],
                      [ q1[ 1 ] + q1[ 4 ] ],
                      [ q1[ 2 ] + np.sqrt( d ** 2 - q1[ 3 ] ** 2 - q1[ 4 ] ** 2 ) ] ] )

    x31 = np.array( [ [ q2[ 0 ] ],
                      [ q2[ 1 ] ],
                      [ q2[ 2 ] ] ] )

    x32 = np.array( [ [ q2[ 0 ] + q2[ 3 ] ],
                      [ q2[ 1 ] + q2[ 4 ] ],
                      [ q2[ 2 ] + np.sqrt( d ** 2 - q2[ 3 ] ** 2 - q2[ 4 ] ** 2 ) ] ] )

    P = potential_e( x11, x21, l[ 0 ] ) + potential_e( x21, x31, l[ 1 ] ) + potential_e( x31, x11, l[ 2 ] ) + \
        potential_e( x12, x22, l[ 3 ] ) + potential_e( x22, x32, l[ 4 ] ) + potential_e( x32, x12, l[ 5 ] ) + \
        potential_e( x11, x32, l[ 6 ] ) + potential_e( x31, x22, l[ 7 ] ) + potential_e( x21, x12, l[ 8 ] )
    return P


q11 = 0.1
q12 = 0.1
q13 = 0
q14 = 0
q15 = 0
q21 = 0.1
q22 = -0.1
q23 = 0
q24 = 0
q25 = 0
d = 0.2
l = [ 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1 ]
k = 100
alpha = 1000
for i in range( 200 ):
    j11 = 6 * k * q11 + 3 * k * q14 - 3 * k * q21 - k * q24 - (k * l[ 1 ] * abs( q11 - q21 ) * np.sign( q11 - q21 )) / (
            abs( q11 - q21 ) ** 2 + abs( q12 - q22 ) ** 2 + abs( q13 - q23 ) ** 2) ** (1 / 2) - (
                  k * l[ 0 ] * abs( q11 ) * np.sign( q11 )) / (abs( q11 ) ** 2 + abs( q12 ) ** 2 + abs( q13 ) ** 2) ** (
                  1 / 2) - (k * l[ 4 ] * abs( q11 + q14 - q21 - q24 ) * np.sign( q11 + q14 - q21 - q24 )) / (abs(
        q13 - q23 + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) - (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) ) ** 2 + abs(
        q11 + q14 - q21 - q24 ) ** 2 + abs( q12 + q15 - q22 - q25 ) ** 2) ** (1 / 2) - (
                  k * l[ 8 ] * abs( q11 ) * np.sign( q11 )) / (
                  abs( q11 ) ** 2 + abs( q12 ) ** 2 + abs( d - q13 ) ** 2) ** (
                  1 / 2) - (k * l[ 3 ] * abs( q11 + q14 ) * np.sign( q11 + q14 )) / (
                  abs( q11 + q14 ) ** 2 + abs( q12 + q15 ) ** 2 + abs(
              q13 - d + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) ) ** 2) ** (1 / 2) - (
                  k * l[ 7 ] * abs( q11 + q14 - q21 ) * np.sign( q11 + q14 - q21 )) / (
                  abs( q11 + q14 - q21 ) ** 2 + abs( q12 + q15 - q22 ) ** 2 + abs(
              q13 - q23 + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) ) ** 2) ** (1 / 2)

    j12 = 6 * k * q12 + 3 * k * q15 - 3 * k * q22 - k * q25 - (k * l[ 1 ] * abs( q12 - q22 ) * np.sign( q12 - q22 )) / (
            abs( q11 - q21 ) ** 2 + abs( q12 - q22 ) ** 2 + abs( q13 - q23 ) ** 2) ** (1 / 2) - (
                  k * l[ 0 ] * abs( q12 ) * np.sign( q12 )) / (abs( q11 ) ** 2 + abs( q12 ) ** 2 + abs( q13 ) ** 2) ** (
                  1 / 2) - (
                  k * l[ 4 ] * abs( q12 + q15 - q22 - q25 ) * np.sign( q12 + q15 - q22 - q25 )) / (abs(
        q13 - q23 + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) - (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) ) ** 2 + abs(
        q11 + q14 - q21 - q24 ) ** 2 + abs( q12 + q15 - q22 - q25 ) ** 2) ** (1 / 2) - (
                  k * l[ 8 ] * abs( q12 ) * np.sign( q12 )) / (
                  abs( q11 ) ** 2 + abs( q12 ) ** 2 + abs( d - q13 ) ** 2) ** (
                  1 / 2) - (k * l[ 3 ] * abs( q12 + q15 ) * np.sign( q12 + q15 )) / (
                  abs( q11 + q14 ) ** 2 + abs( q12 + q15 ) ** 2 + abs(
              q13 - d + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) ) ** 2) ** (1 / 2) - (
                  k * l[ 7 ] * abs( q12 + q15 - q22 ) * np.sign( q12 + q15 - q22 )) / (
                  abs( q11 + q14 - q21 ) ** 2 + abs( q12 + q15 - q22 ) ** 2 + abs(
              q13 - q23 + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) ) ** 2) ** (1 / 2)

    j13 = 6 * k * q13 - 2 * d * k - 3 * k * q23 + 3 * k * (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) - k * (
            d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) - (k * l[ 4 ] * abs(
        q13 - q23 + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) - (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) ) * np.sign(
        q13 - q23 + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) - (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) )) / (abs(
        q13 - q23 + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) - (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) ) ** 2 + abs(
        q11 + q14 - q21 - q24 ) ** 2 + abs( q12 + q15 - q22 - q25 ) ** 2) ** (1 / 2) - (
                  k * l[ 1 ] * abs( q13 - q23 ) * np.sign( q13 - q23 )) / (
                  abs( q11 - q21 ) ** 2 + abs( q12 - q22 ) ** 2 + abs( q13 - q23 ) ** 2) ** (1 / 2) - (
                  k * l[ 0 ] * abs( q13 ) * np.sign( q13 )) / (abs( q11 ) ** 2 + abs( q12 ) ** 2 + abs( q13 ) ** 2) ** (
                  1 / 2) + (
                  k * l[ 8 ] * np.sign( d - q13 ) * abs( d - q13 )) / (
                  abs( q11 ) ** 2 + abs( q12 ) ** 2 + abs( d - q13 ) ** 2) ** (
                  1 / 2) - (k * l[ 7 ] * abs( q13 - q23 + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) ) * np.sign(
        q13 - q23 + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) )) / (
                  abs( q11 + q14 - q21 ) ** 2 + abs( q12 + q15 - q22 ) ** 2 + abs(
              q13 - q23 + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) ) ** 2) ** (1 / 2) - (
                  k * l[ 3 ] * abs( q13 - d + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) ) * np.sign(
              q13 - d + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) )) / (
                  abs( q11 + q14 ) ** 2 + abs( q12 + q15 ) ** 2 + abs(
              q13 - d + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) ) ** 2) ** (1 / 2)

    j14 = (k * (l[ 4 ] - (abs(
        q13 - q23 + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) - (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) ) ** 2 + abs(
        q11 + q14 - q21 - q24 ) ** 2 + abs( q12 + q15 - q22 - q25 ) ** 2) ** (1 / 2)) * (
                   2 * q21 - 2 * q14 - 2 * q11 + 2 * q24 + (2 * q14 * (
                   q13 - q23 + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) - (d ** 2 - q24 ** 2 - q25 ** 2) ** (
                   1 / 2))) / (
                           d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2))) / (2 * (abs(
        q13 - q23 + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) - (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) ) ** 2 + abs(
        q11 + q14 - q21 - q24 ) ** 2 + abs( q12 + q15 - q22 - q25 ) ** 2) ** (1 / 2)) - (k * (l[ 7 ] - (
            abs( q13 - q23 + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) ) ** 2 + abs( q11 + q14 - q21 ) ** 2 + abs(
        q12 + q15 - q22 ) ** 2) ** (1 / 2)) * (2 * q11 - 2 * q21 - (2 * q13 * q14) / (d ** 2 - q14 ** 2 - q15 ** 2) ** (
            1 / 2) + (2 * q14 * q23) / (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2))) / (2 * (
            abs( q11 + q14 - q21 ) ** 2 + abs( q12 + q15 - q22 ) ** 2 + abs(
        q13 - q23 + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) ) ** 2) ** (1 / 2)) - (k * (l[ 3 ] - (
            abs( q11 + q14 ) ** 2 + abs( q12 + q15 ) ** 2 + abs(
        q13 - d + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) ) ** 2) ** (1 / 2)) * (
                                                                                             2 * d * q14 - 2 * q13 * q14 + 2 * q11 * (
                                                                                             d ** 2 - q14 ** 2 - q15 ** 2) ** (
                                                                                                     1 / 2))) / (
                  2 * (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) * (abs( q11 + q14 ) ** 2 + abs( q12 + q15 ) ** 2 + abs(
              q13 - d + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) ) ** 2) ** (1 / 2))

    j15 = (k * (l[ 4 ] - (abs(
        q13 - q23 + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) - (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) ) ** 2 + abs(
        q11 + q14 - q21 - q24 ) ** 2 + abs( q12 + q15 - q22 - q25 ) ** 2) ** (1 / 2)) * (
                   2 * q22 - 2 * q15 - 2 * q12 + 2 * q25 + (2 * q15 * (
                   q13 - q23 + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) - (d ** 2 - q24 ** 2 - q25 ** 2) ** (
                   1 / 2))) / (
                           d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2))) / (2 * (abs(
        q13 - q23 + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) - (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) ) ** 2 + abs(
        q11 + q14 - q21 - q24 ) ** 2 + abs( q12 + q15 - q22 - q25 ) ** 2) ** (1 / 2)) - (k * (l[ 7 ] - (
            abs( q13 - q23 + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) ) ** 2 + abs( q11 + q14 - q21 ) ** 2 + abs(
        q12 + q15 - q22 ) ** 2) ** (1 / 2)) * (2 * q12 - 2 * q22 - (2 * q13 * q15) / (d ** 2 - q14 ** 2 - q15 ** 2) ** (
            1 / 2) + (2 * q15 * q23) / (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2))) / (2 * (
            abs( q11 + q14 - q21 ) ** 2 + abs( q12 + q15 - q22 ) ** 2 + abs(
        q13 - q23 + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) ) ** 2) ** (1 / 2)) - (k * (l[ 3 ] - (
            abs( q11 + q14 ) ** 2 + abs( q12 + q15 ) ** 2 + abs(
        q13 - d + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) ) ** 2) ** (1 / 2)) * (
                                                                                             2 * d * q15 - 2 * q13 * q15 + 2 * q12 * (
                                                                                             d ** 2 - q14 ** 2 - q15 ** 2) ** (
                                                                                                     1 / 2))) / (
                  2 * (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) * (abs( q11 + q14 ) ** 2 + abs( q12 + q15 ) ** 2 + abs(
              q13 - d + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) ) ** 2) ** (1 / 2))

    j21 = 6 * k * q21 - 2 * k * q14 - 3 * k * q11 + 3 * k * q24 + (
            k * l[ 1 ] * abs( q11 - q21 ) * np.sign( q11 - q21 )) / (
                  abs( q11 - q21 ) ** 2 + abs( q12 - q22 ) ** 2 + abs( q13 - q23 ) ** 2) ** (1 / 2) - (
                  k * l[ 2 ] * abs( q21 ) * np.sign( q21 )) / (abs( q21 ) ** 2 + abs( q22 ) ** 2 + abs( q23 ) ** 2) ** (
                  1 / 2) + (
                  k * l[ 4 ] * abs( q11 + q14 - q21 - q24 ) * np.sign( q11 + q14 - q21 - q24 )) / (abs(
        q13 - q23 + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) - (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) ) ** 2 + abs(
        q11 + q14 - q21 - q24 ) ** 2 + abs( q12 + q15 - q22 - q25 ) ** 2) ** (1 / 2) - (
                  k * l[ 5 ] * abs( q21 + q24 ) * np.sign( q21 + q24 )) / (
                  abs( q21 + q24 ) ** 2 + abs( q22 + q25 ) ** 2 + abs(
              q23 - d + (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) ) ** 2) ** (1 / 2) - (
                  k * l[ 6 ] * abs( q21 + q24 ) * np.sign( q21 + q24 )) / (
                  abs( q23 + (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) ) ** 2 + abs( q21 + q24 ) ** 2 + abs(
              q22 + q25 ) ** 2) ** (1 / 2) + (k * l[ 7 ] * abs( q11 + q14 - q21 ) * np.sign( q11 + q14 - q21 )) / (
                  abs( q11 + q14 - q21 ) ** 2 + abs( q12 + q15 - q22 ) ** 2 + abs(
              q13 - q23 + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) ) ** 2) ** (1 / 2)

    j22 = 6 * k * q22 - 2 * k * q15 - 3 * k * q12 + 3 * k * q25 + (
            k * l[ 1 ] * abs( q12 - q22 ) * np.sign( q12 - q22 )) / (
                  abs( q11 - q21 ) ** 2 + abs( q12 - q22 ) ** 2 + abs( q13 - q23 ) ** 2) ** (1 / 2) - (
                  k * l[ 2 ] * abs( q22 ) * np.sign( q22 )) / (abs( q21 ) ** 2 + abs( q22 ) ** 2 + abs( q23 ) ** 2) ** (
                  1 / 2) + (
                  k * l[ 4 ] * abs( q12 + q15 - q22 - q25 ) * np.sign( q12 + q15 - q22 - q25 )) / (abs(
        q13 - q23 + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) - (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) ) ** 2 + abs(
        q11 + q14 - q21 - q24 ) ** 2 + abs( q12 + q15 - q22 - q25 ) ** 2) ** (1 / 2) - (
                  k * l[ 5 ] * abs( q22 + q25 ) * np.sign( q22 + q25 )) / (
                  abs( q21 + q24 ) ** 2 + abs( q22 + q25 ) ** 2 + abs(
              q23 - d + (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) ) ** 2) ** (1 / 2) - (
                  k * l[ 6 ] * abs( q22 + q25 ) * np.sign( q22 + q25 )) / (
                  abs( q23 + (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) ) ** 2 + abs( q21 + q24 ) ** 2 + abs(
              q22 + q25 ) ** 2) ** (1 / 2) + (k * l[ 7 ] * abs( q12 + q15 - q22 ) * np.sign( q12 + q15 - q22 )) / (
                  abs( q11 + q14 - q21 ) ** 2 + abs( q12 + q15 - q22 ) ** 2 + abs(
              q13 - q23 + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) ) ** 2) ** (1 / 2)

    j23 = 6 * k * q23 - 3 * k * q13 - d * k - 2 * k * (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) + 3 * k * (
            d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) + (k * l[ 4 ] * abs(
        q13 - q23 + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) - (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) ) * np.sign(
        q13 - q23 + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) - (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) )) / (abs(
        q13 - q23 + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) - (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) ) ** 2 + abs(
        q11 + q14 - q21 - q24 ) ** 2 + abs( q12 + q15 - q22 - q25 ) ** 2) ** (1 / 2) + (
                  k * l[ 1 ] * abs( q13 - q23 ) * np.sign( q13 - q23 )) / (
                  abs( q11 - q21 ) ** 2 + abs( q12 - q22 ) ** 2 + abs( q13 - q23 ) ** 2) ** (1 / 2) - (
                  k * l[ 2 ] * abs( q23 ) * np.sign( q23 )) / (abs( q21 ) ** 2 + abs( q22 ) ** 2 + abs( q23 ) ** 2) ** (
                  1 / 2) - (
                  k * l[ 6 ] * abs( q23 + (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) ) * np.sign(
              q23 + (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) )) / (
                  abs( q23 + (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) ) ** 2 + abs( q21 + q24 ) ** 2 + abs(
              q22 + q25 ) ** 2) ** (1 / 2) + (
                  k * l[ 7 ] * abs( q13 - q23 + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) ) * np.sign(
              q13 - q23 + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) )) / (
                  abs( q11 + q14 - q21 ) ** 2 + abs( q12 + q15 - q22 ) ** 2 + abs(
              q13 - q23 + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) ) ** 2) ** (1 / 2) - (
                  k * l[ 5 ] * abs( q23 - d + (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) ) * np.sign(
              q23 - d + (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) )) / (
                  abs( q21 + q24 ) ** 2 + abs( q22 + q25 ) ** 2 + abs(
              q23 - d + (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) ) ** 2) ** (1 / 2)

    j24 = (k * (2 * q23 * q24 - 2 * q21 * (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2)) * (l[ 6 ] - (
            abs( q23 + (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) ) ** 2 + abs( q21 + q24 ) ** 2 + abs(
        q22 + q25 ) ** 2) ** (1 / 2))) / (2 * (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) * (
            abs( q23 + (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) ) ** 2 + abs( q21 + q24 ) ** 2 + abs(
        q22 + q25 ) ** 2) ** (1 / 2)) - (k * (l[ 5 ] - (abs( q21 + q24 ) ** 2 + abs( q22 + q25 ) ** 2 + abs(
        q23 - d + (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) ) ** 2) ** (1 / 2)) * (
                                                 2 * d * q24 - 2 * q23 * q24 + 2 * q21 * (
                                                 d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2))) / (
                  2 * (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) * (
                  abs( q21 + q24 ) ** 2 + abs( q22 + q25 ) ** 2 + abs(
              q23 - d + (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) ) ** 2) ** (1 / 2)) - (k * (l[ 4 ] - (abs(
        q13 - q23 + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) - (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) ) ** 2 + abs(
        q11 + q14 - q21 - q24 ) ** 2 + abs( q12 + q15 - q22 - q25 ) ** 2) ** (1 / 2)) * (
                                                                                                 2 * q21 - 2 * q14 - 2 * q11 + 2 * q24 + (
                                                                                                 2 * q24 * (
                                                                                                 q13 - q23 + (
                                                                                                 d ** 2 - q14 ** 2 - q15 ** 2) ** (
                                                                                                         1 / 2) - (
                                                                                                         d ** 2 - q24 ** 2 - q25 ** 2) ** (
                                                                                                         1 / 2))) / (
                                                                                                         d ** 2 - q24 ** 2 - q25 ** 2) ** (
                                                                                                         1 / 2))) / (
                  2 * (abs(
              q13 - q23 + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) - (d ** 2 - q24 ** 2 - q25 ** 2) ** (
                      1 / 2) ) ** 2 + abs(
              q11 + q14 - q21 - q24 ) ** 2 + abs( q12 + q15 - q22 - q25 ) ** 2) ** (1 / 2))

    j25 = (k * (2 * q23 * q25 - 2 * q22 * (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2)) * (l[ 6 ] - (
            abs( q23 + (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) ) ** 2 + abs( q21 + q24 ) ** 2 + abs(
        q22 + q25 ) ** 2) ** (1 / 2))) / (2 * (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) * (
            abs( q23 + (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) ) ** 2 + abs( q21 + q24 ) ** 2 + abs(
        q22 + q25 ) ** 2) ** (1 / 2)) - (k * (l[ 5 ] - (abs( q21 + q24 ) ** 2 + abs( q22 + q25 ) ** 2 + abs(
        q23 - d + (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) ) ** 2) ** (1 / 2)) * (
                                                 2 * d * q25 - 2 * q23 * q25 + 2 * q22 * (
                                                 d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2))) / (
                  2 * (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) * (
                  abs( q21 + q24 ) ** 2 + abs( q22 + q25 ) ** 2 + abs(
              q23 - d + (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) ) ** 2) ** (1 / 2)) - (k * (l[ 4 ] - (abs(
        q13 - q23 + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) - (d ** 2 - q24 ** 2 - q25 ** 2) ** (1 / 2) ) ** 2 + abs(
        q11 + q14 - q21 - q24 ) ** 2 + abs( q12 + q15 - q22 - q25 ) ** 2) ** (1 / 2)) * (
                                                                                                 2 * q22 - 2 * q15 - 2 * q12 + 2 * q25 + (
                                                                                                 2 * q25 * (
                                                                                                 q13 - q23 + (
                                                                                                 d ** 2 - q14 ** 2 - q15 ** 2) ** (
                                                                                                         1 / 2) - (
                                                                                                         d ** 2 - q24 ** 2 - q25 ** 2) ** (
                                                                                                         1 / 2))) / (
                                                                                                         d ** 2 - q24 ** 2 - q25 ** 2) ** (
                                                                                                         1 / 2))) / (
                  2 * (abs(
              q13 - q23 + (d ** 2 - q14 ** 2 - q15 ** 2) ** (1 / 2) - (d ** 2 - q24 ** 2 - q25 ** 2) ** (
                      1 / 2) ) ** 2 + abs(
              q11 + q14 - q21 - q24 ) ** 2 + abs( q12 + q15 - q22 - q25 ) ** 2) ** (1 / 2))

    q11 -= 1 / alpha * j11
    q12 -= 1 / alpha * j12
    q13 -= 1 / alpha * j13
    q14 -= 1 / alpha * j14
    q15 -= 1 / alpha * j15

    q21 -= 1 / alpha * j21
    q22 -= 1 / alpha * j22
    q23 -= 1 / alpha * j23
    q24 -= 1 / alpha * j24
    q25 -= 1 / alpha * j25

    print( q11, q12, q13, q14, q15,np.sqrt( d ** 2 - q14 ** 2 - q15 ** 2 ), q21, q22, q23, q24, q25 ,np.sqrt( d ** 2 - q24 ** 2 - q25 ** 2 ))
fig = plt.figure()
ax = fig.gca( projection='3d' )

ax.plot( [ 0, 0 ], [ 0, 0 ], [ 0, d ] )
ax.plot( [ q11, q11 + q14 ], [ q12, q12 + q15 ], [ q13, q13 + np.sqrt( d ** 2 - q14 ** 2 - q15 ** 2 ) ] )
ax.plot( [ q21, q21 + q24 ], [ q22, q22 + q25 ], [ q23, q23 + np.sqrt( d ** 2 - q24 ** 2 - q25 ** 2 ) ] )

ax.set_xlim([-0.2,0.2])
ax.set_ylim([-0.2,0.2])
ax.set_zlim([-0.2,0.2])

plt.show()
